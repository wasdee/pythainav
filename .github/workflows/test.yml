name: Test

on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9']
        experimental: [false]
        include:
          - os: ubuntu-latest
            python-version: "3.10-dev"
            experimental: true
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3.1.2
        with:
          python-version: ${{ matrix.python-version }}

    # https://github.com/python-poetry/poetry/blob/master/.github/workflows/main.yml
      - name: Bootstrap poetry
        shell: bash
        run: |
          curl -sL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py \
            | python - -y

      - name: Update PATH
        if: ${{ matrix.os != 'windows-latest' }}
        shell: bash
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Set up cache
        uses: actions/cache@v2.1.6
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install

      - name: Run safety checks and style check
        run: |
          poetry run pre-commit run --all-files

      - name: Run tests
        env:
          FUND_FACTSHEET_KEY: ${{ secrets.FUND_FACTSHEET_KEY }}
          FUND_DAILY_INFO_KEY: ${{ secrets.FUND_DAILY_INFO_KEY }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          poetry run pytest
